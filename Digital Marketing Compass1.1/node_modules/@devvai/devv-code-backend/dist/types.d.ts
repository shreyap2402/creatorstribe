export interface User {
    projectId: string;
    uid: string;
    name: string;
    email: string;
    createdTime: number;
    lastLoginTime: number;
}
export interface AuthResponse {
    sid: string;
    user: User;
}
export type QueryOperator = 'EQ' | 'NE' | 'LT' | 'LE' | 'GT' | 'GE' | 'BEGINS_WITH' | 'BETWEEN';
export type QueryValue = string | number | boolean | [string | number, string | number];
export interface QueryCondition {
    operator: QueryOperator;
    value: QueryValue;
}
export interface GetItemsOptions {
    limit?: number;
    cursor?: string;
    sort?: string;
    order?: 'asc' | 'desc';
    query?: Record<string, string | number | boolean | QueryCondition>;
}
export interface GetItemsResponse {
    items: Record<string, any>[];
    nextCursor?: string;
    indexName?: string;
}
export type ItemData = Record<string, any>;
export interface ApiResponse {
    message: string;
}
export interface UploadFileRequest {
    file: File;
}
export interface UploadFileSuccessResponse {
    [key: string]: string | undefined;
    filename?: string;
    link?: string;
}
export interface ErrorResponse {
    errCode: number;
    errMsg: string;
}
export type UploadFileResponse = UploadFileSuccessResponse | ErrorResponse;
export interface EmailTag {
    name: string;
    value: string;
}
export interface EmailAttachment {
    filename: string;
    content?: number[];
    path?: string;
    content_type?: string;
}
export interface SendEmailOptions {
    from: string;
    to: string[];
    subject: string;
    bcc?: string[];
    cc?: string[];
    reply_to?: string;
    html?: string;
    text?: string;
    tags?: EmailTag[];
    attachments?: EmailAttachment[];
    headers?: Record<string, string>;
    scheduled_at?: string;
}
export interface EmailResponse {
    id: string;
}
export type ImageAspectRatio = '1:1' | '16:9' | '21:9' | '3:2' | '2:3' | '4:5' | '5:4' | '3:4' | '4:3' | '9:16' | '9:21';
export type ImageOutputFormat = 'webp' | 'jpg' | 'png';
export interface TextToImageOptions {
    prompt: string;
    model?: string;
    image_url?: string;
    image_urls?: string[];
    num_outputs?: number;
    aspect_ratio?: ImageAspectRatio;
    output_format?: ImageOutputFormat;
}
export interface TextToImageResponse {
    images: string[];
}
interface JinaApiResponse<T> {
    code: number;
    status: number;
    data: T;
    meta?: {
        usage?: {
            tokens: number;
        };
    };
}
export interface WebSearchOptions {
    query: string | string[];
}
export interface WebSearchResult {
    title: string;
    url: string;
    description: string;
    content: string;
    date?: string;
    usage?: {
        tokens: number;
    };
}
export type WebSearchResponse = JinaApiResponse<WebSearchResult[]>;
export interface WebReaderOptions {
    url: string;
}
export interface WebReaderData {
    title: string;
    description: string;
    url: string;
    content: string;
    publishedTime?: string;
    metadata?: Record<string, any>;
    external?: Record<string, any>;
    warning?: string;
    usage?: {
        tokens: number;
    };
}
export type WebReaderResponse = JinaApiResponse<WebReaderData>;
export interface TextToSpeechOptions {
    text: string;
    voice_id?: string;
    model_id?: string;
    output_format?: string;
    stability?: number;
    similarity_boost?: number;
    style?: number;
}
export interface TextToSpeechResponse {
    audio_url: string;
    format: string;
    size: number;
}
/**
 * Allowed Replicate text-to-image models
 */
export type ReplicateTextToImageModel = 'ideogram-ai/ideogram-v3-turbo' | 'black-forest-labs/flux-schnell' | 'google/imagen-4-fast' | 'black-forest-labs/flux-kontext-pro' | 'prunaai/hidream-l1-fast' | 'luma/photon-flash';
/**
 * Replicate Image Generation Options
 * Limited to specific pre-approved models for optimal performance and reliability
 */
export interface ReplicateImageOptions extends Omit<TextToImageOptions, 'model'> {
    model: ReplicateTextToImageModel;
    width?: number;
    height?: number;
    negative_prompt?: string;
    guidance_scale?: number;
    num_inference_steps?: number;
    seed?: number;
    [key: string]: any;
}
export interface ReplicateImageResponse {
    images: string[];
    model: string;
    metadata?: {
        prediction_id?: string;
        processing_time?: number;
    };
}
export interface SpeechToTextOptions {
    audio_url: string;
}
export interface SpeechToTextWord {
    text: string;
    start: number;
    end: number;
    type: 'word' | 'spacing';
}
export interface SpeechToTextResponse {
    text: string;
    language_code: string;
    language_probability: number;
    words: SpeechToTextWord[];
}
export {};
